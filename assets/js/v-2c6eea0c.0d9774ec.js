"use strict";(self.webpackChunklaravel_update_info=self.webpackChunklaravel_update_info||[]).push([[13],{5368:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2c6eea0c",path:"/laravel8/v8.40-v8.49/",title:"v8.40-v8.49",lang:"ja-JP",frontmatter:{},excerpt:"",headers:[{level:2,title:"Modelのイベントを発火させずにupdateするメソッドが追加",slug:"modelのイベントを発火させずにupdateするメソッドが追加",children:[]},{level:2,title:"カーソルページネーションが追加",slug:"カーソルページネーションが追加",children:[]},{level:2,title:"assertDispatchedSync()などのメソッドがBusFake（ジョブのディスパッチをassertする）に追加されました",slug:"assertdispatchedsync-などのメソッドがbusfake-ジョブのディスパッチをassertする-に追加されました",children:[]},{level:2,title:"リレーションのクエリにwithExists()メソッドが追加",slug:"リレーションのクエリにwithexists-メソッドが追加",children:[]},{level:2,title:"ModelおよびEloquentのCollectionにloadExists()メソッドが追加",slug:"modelおよびeloquentのcollectionにloadexists-メソッドが追加",children:[]},{level:2,title:"パスワードのバリデーションにデフォルトが定義できるように",slug:"パスワードのバリデーションにデフォルトが定義できるように",children:[]},{level:2,title:"メンテナンスモード時のレスポンスにrefreshヘッダーの送信を許可する",slug:"メンテナンスモード時のレスポンスにrefreshヘッダーの送信を許可する",children:[]},{level:2,title:"Eloquentリレーションにone-of-manyが追加",slug:"eloquentリレーションにone-of-manyが追加",children:[]},{level:2,title:"Eloquentに厳密な読み込みモード追加",slug:"eloquentに厳密な読み込みモード追加",children:[]},{level:2,title:"assertDatabaseにモデルサポートを追加",slug:"assertdatabaseにモデルサポートを追加",children:[]},{level:2,title:"遅延ロード違反を任意で処理できるように",slug:"遅延ロード違反を任意で処理できるように",children:[]},{level:2,title:"php artisan storage:linkでのシンボリックリンクの再作成が可能に",slug:"php-artisan-storage-linkでのシンボリックリンクの再作成が可能に",children:[]},{level:2,title:"条件付きバリデーションルールが可能に",slug:"条件付きバリデーションルールが可能に",children:[]},{level:2,title:"Bladeエコーステートメントにクラスハンドリングを追加",slug:"bladeエコーステートメントにクラスハンドリングを追加",children:[]},{level:2,title:"php artisan dbでの接続先にreadまたはwriteの指定が可能に",slug:"php-artisan-dbでの接続先にreadまたはwriteの指定が可能に",children:[]},{level:2,title:"TestResponseにダウンロードのテストを追加",slug:"testresponseにダウンロードのテストを追加",children:[]},{level:2,title:"Notification Stubsのカスタマイズが可能に",slug:"notification-stubsのカスタマイズが可能に",children:[]},{level:2,title:"php artisan schedule:run出力にタイムスタンプが追加",slug:"php-artisan-schedule-run出力にタイムスタンプが追加",children:[]},{level:2,title:"AssertableJsonにwhereContains()が追加",slug:"assertablejsonにwherecontains-が追加",children:[]},{level:2,title:"StrヘルパーにmatchとmatchAllが追加",slug:"strヘルパーにmatchとmatchallが追加",children:[]},{level:2,title:"バリデーションルールのpasswordがcurrent_passwordに移行",slug:"バリデーションルールのpasswordがcurrent-passwordに移行",children:[]},{level:2,title:"Paginatorでtap()が使えるように",slug:"paginatorでtap-が使えるように",children:[]},{level:2,title:"php artisan queue:prune-failedが追加",slug:"php-artisan-queue-prune-failedが追加",children:[]},{level:2,title:"オンデマンドディスクの構成が可能に",slug:"オンデマンドディスクの構成が可能に",children:[]},{level:2,title:"Collectionにsliding()メソッドが追加",slug:"collectionにsliding-メソッドが追加",children:[]},{level:2,title:"HttpクライアントのRequestでマクロが使用可能",slug:"httpクライアントのrequestでマクロが使用可能",children:[]},{level:2,title:"FileFactory::image()でGIF, WEBP, WBMP, BMPをサポート",slug:"filefactory-image-でgif-webp-wbmp-bmpをサポート",children:[]},{level:2,title:"HttpレスポンスからstatusText()を取得",slug:"httpレスポンスからstatustext-を取得",children:[]},{level:2,title:"Model::factory()->sequence()クロージャーから$countと$indexの参照が可能に",slug:"model-factory-sequence-クロージャーから-countと-indexの参照が可能に",children:[]},{level:2,title:"後続のログにコンテキストを追加",slug:"後続のログにコンテキストを追加",children:[]}],filePathRelative:"laravel8/v8.40-v8.49/README.md",git:{updatedTime:1641804858e3,contributors:[{name:"okdyy75",email:"okdyy75@gmail.com",commits:3}]}}},4107:(n,s,a)=>{a.r(s),a.d(s,{default:()=>as});var e=a(6252);const p=(0,e.uE)('<h1 id="v8-40-v8-49" tabindex="-1"><a class="header-anchor" href="#v8-40-v8-49" aria-hidden="true">#</a> v8.40-v8.49</h1><h2 id="modelのイベントを発火させずにupdateするメソッドが追加" tabindex="-1"><a class="header-anchor" href="#modelのイベントを発火させずにupdateするメソッドが追加" aria-hidden="true">#</a> Modelのイベントを発火させずにupdateするメソッドが追加</h2><ul><li>v8.41.0</li><li>src/Illuminate/Database/Eloquent/Model.php</li></ul><p><code>update([])</code>と同じように使えます</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token class-name static-context">Model</span><span class="token operator">::</span><span class="token function">updateQuietly</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>ちなみにsaveメソッドにはすでにあります</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">findOrFail</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;Victoria Faith&#39;</span><span class="token punctuation">;</span>\n\n<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token function">saveQuietly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',7),t={href:"https://github.com/laravel/framework/pull/37169",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("https://github.com/laravel/framework/pull/37169"),l={href:"https://readouble.com/laravel/8.x/ja/eloquent.html#saving-a-single-model-without-events",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/eloquent.html#saving-a-single-model-without-events"),r=(0,e.uE)('<h2 id="カーソルページネーションが追加" tabindex="-1"><a class="header-anchor" href="#カーソルページネーションが追加" aria-hidden="true">#</a> カーソルページネーションが追加</h2><ul><li>v8.41.0</li><li>src/Illuminate/Contracts/Pagination/CursorPaginator.php</li></ul><p>無限スクロールや、ビッグデータを扱う際のページング時に使うと良いらしいです。</p><p>詳しくはドキュメントをチェック！</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">table</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">cursorPaginate</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',5),i={href:"https://github.com/laravel/framework/pull/37216",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("https://github.com/laravel/framework/pull/37216"),k={href:"https://readouble.com/laravel/8.x/ja/pagination.html#cursor-pagination",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/pagination.html#cursor-pagination"),b=(0,e.uE)('<h2 id="assertdispatchedsync-などのメソッドがbusfake-ジョブのディスパッチをassertする-に追加されました" tabindex="-1"><a class="header-anchor" href="#assertdispatchedsync-などのメソッドがbusfake-ジョブのディスパッチをassertする-に追加されました" aria-hidden="true">#</a> <code>assertDispatchedSync()</code>などのメソッドがBusFake（ジョブのディスパッチをassertする）に追加されました</h2><ul><li>v8.42.0</li><li>src/Illuminate/Support/Testing/Fakes/BusFake.php</li></ul><p>ジョブをすぐに（同期して）ディスパッチする<code>dispatchSync</code>メソッドがlaravel8では追加されたんですが、それのテストを行うためのassertが追加されました</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token operator">+</span> <span class="token function">assertDispatchedSync</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">,</span> <span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>\n<span class="token operator">+</span> <span class="token function">assertDispatchedSyncTimes</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">,</span> <span class="token variable">$times</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token operator">+</span> <span class="token function">assertNotDispatchedSync</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">,</span> <span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>\n<span class="token operator">+</span> <span class="token function">dispatchedSync</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$command</span><span class="token punctuation">,</span> <span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>\n<span class="token operator">+</span> <span class="token function">hasDispatchedSync</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',4),m={href:"https://github.com/laravel/framework/pull/37350",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("https://github.com/laravel/framework/pull/37350"),h={href:"https://readouble.com/laravel/8.x/ja/mocking.html#bus-fake",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/mocking.html#bus-fake"),f=(0,e.uE)('<h2 id="リレーションのクエリにwithexists-メソッドが追加" tabindex="-1"><a class="header-anchor" href="#リレーションのクエリにwithexists-メソッドが追加" aria-hidden="true">#</a> リレーションのクエリに<code>withExists()</code>メソッドが追加</h2><ul><li>v8.42.0</li><li>src/Illuminate/Database/Eloquent/Concerns/QueriesRelationships.php</li></ul><p>一度却下されていましたが、コード量を減らして再PR＆マージされました祝</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">withExists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;posts&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//...</span>\n<span class="token variable">$isAuthor</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">posts_exists</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">withExists</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n        <span class="token string single-quoted-string">&#39;posts as is_author&#39;</span><span class="token punctuation">,</span>\n        <span class="token string single-quoted-string">&#39;posts as is_tech_author&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;category&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;tech&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token string single-quoted-string">&#39;comments&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//...</span>\n<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">is_author</span><span class="token punctuation">;</span>\n<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">is_tech_author</span><span class="token punctuation">;</span>\n<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">comments_exists</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',5),w={href:"https://github.com/laravel/framework/pull/37302",target:"_blank",rel:"noopener noreferrer"},y=(0,e.Uk)("https://github.com/laravel/framework/pull/37302"),x={href:"https://readouble.com/laravel/8.x/ja/eloquent-relationships.html#other-aggregate-functions",target:"_blank",rel:"noopener noreferrer"},q=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/eloquent-relationships.html#other-aggregate-functions"),_=(0,e.uE)('<h2 id="modelおよびeloquentのcollectionにloadexists-メソッドが追加" tabindex="-1"><a class="header-anchor" href="#modelおよびeloquentのcollectionにloadexists-メソッドが追加" aria-hidden="true">#</a> ModelおよびEloquentのCollectionに<code>loadExists()</code>メソッドが追加</h2><ul><li>v8.42.0</li><li>src/Illuminate/Database/Eloquent/Collection.php</li><li>src/Illuminate/Database/Eloquent/Model.php</li></ul><p>v8.13.0で追加された<code>loadMax()</code>や<code>loadSum()</code>と同じように<code>loadExists()</code>も使えるようになりました</p>',3),$={href:"https://github.com/laravel/framework/pull/37388",target:"_blank",rel:"noopener noreferrer"},C=(0,e.Uk)("https://github.com/laravel/framework/pull/37388"),E={href:"https://readouble.com/laravel/8.x/ja/eloquent-relationships.html#other-aggregate-functions",target:"_blank",rel:"noopener noreferrer"},j=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/eloquent-relationships.html#other-aggregate-functions"),U=(0,e.uE)('<h2 id="パスワードのバリデーションにデフォルトが定義できるように" tabindex="-1"><a class="header-anchor" href="#パスワードのバリデーションにデフォルトが定義できるように" aria-hidden="true">#</a> パスワードのバリデーションにデフォルトが定義できるように</h2><ul><li>v8.42.0</li><li>src/Illuminate/Validation/Rules/Password.php</li></ul><p>サービスプロバイダの1つの<code>boot()</code>メソッド内で定義することで</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Validation<span class="token punctuation">\\</span>Rules<span class="token punctuation">\\</span>Password</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * アプリケーションの全サービスの初期処理\n *\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name static-context">Password</span><span class="token operator">::</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token variable">$rule</span> <span class="token operator">=</span> <span class="token class-name static-context">Password</span><span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">isProduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                    <span class="token operator">?</span> <span class="token variable">$rule</span><span class="token operator">-&gt;</span><span class="token function">mixedCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">uncompromised</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">:</span> <span class="token variable">$rule</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>簡単にパスワードルールのデフォルトを適用できます</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;password&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Password</span><span class="token operator">::</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',6),P={href:"https://github.com/laravel/framework/pull/37387",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("https://github.com/laravel/framework/pull/37387"),W={href:"https://readouble.com/laravel/8.x/ja/validation.html#defining-default-password-rules",target:"_blank",rel:"noopener noreferrer"},S=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/validation.html#defining-default-password-rules"),D=(0,e._)("h2",{id:"メンテナンスモード時のレスポンスにrefreshヘッダーの送信を許可する",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#メンテナンスモード時のレスポンスにrefreshヘッダーの送信を許可する","aria-hidden":"true"},"#"),(0,e.Uk)(" メンテナンスモード時のレスポンスにrefreshヘッダーの送信を許可する")],-1),M=(0,e._)("ul",null,[(0,e._)("li",null,"v8.42.0"),(0,e._)("li",null,"src/Illuminate/Foundation/Http/Middleware/PreventRequestsDuringMaintenance.php")],-1),A=(0,e._)("p",null,[(0,e._)("code",null,"php artisan down --refresh=x"),(0,e.Uk)("のようにするとメンテナンスモード時のx秒後にブラウザの更新を促せます")],-1),F={href:"https://github.com/laravel/framework/pull/37385",target:"_blank",rel:"noopener noreferrer"},R=(0,e.Uk)("https://github.com/laravel/framework/pull/37385"),L=(0,e.uE)('<h2 id="eloquentリレーションにone-of-manyが追加" tabindex="-1"><a class="header-anchor" href="#eloquentリレーションにone-of-manyが追加" aria-hidden="true">#</a> Eloquentリレーションにone-of-manyが追加</h2><ul><li>v8.42.0</li><li>src/Illuminate/Database/Eloquent/Relations/Concerns/CanBeOneOfMany.php</li></ul><p>Before</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">latest_login</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasOne</span><span class="token punctuation">(</span><span class="token class-name static-context">Login</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>After</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">latest_login</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasOne</span><span class="token punctuation">(</span><span class="token class-name static-context">Login</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">ofMany</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;max&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// id and max are default</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>これの何が嬉しいかというと、内部で発行されるSQLがgroup+joinになり、”全ユーザーの最後のログイン履歴を取得”するような場合に発生するN+1問題が解決されます</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>\n<span class="token keyword">FROM</span> <span class="token punctuation">`</span>logins<span class="token punctuation">`</span>\n<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> <span class="token punctuation">(</span>\n    <span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">AS</span> id\n    <span class="token keyword">FROM</span> logins\n    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> logins<span class="token punctuation">.</span>user_id\n<span class="token punctuation">)</span> <span class="token keyword">AS</span> latest_login \n<span class="token keyword">ON</span> latest_login<span class="token punctuation">.</span>id <span class="token operator">=</span> logins<span class="token punctuation">.</span>id\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',8),B={href:"https://github.com/laravel/framework/pull/37362",target:"_blank",rel:"noopener noreferrer"},T=(0,e.Uk)("https://github.com/laravel/framework/pull/37362"),z={href:"https://readouble.com/laravel/8.x/ja/eloquent-relationships.html#advanced-has-one-of-many-relationships",target:"_blank",rel:"noopener noreferrer"},H=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/eloquent-relationships.html#advanced-has-one-of-many-relationships"),O=(0,e.uE)('<h2 id="eloquentに厳密な読み込みモード追加" tabindex="-1"><a class="header-anchor" href="#eloquentに厳密な読み込みモード追加" aria-hidden="true">#</a> Eloquentに厳密な読み込みモード追加</h2><ul><li>v8.43.0</li><li>src/Illuminate/Database/Eloquent/Builder.php</li></ul><p>このモードの何が嬉しいかというとN+1問題を検知できます。</p><p>有効にすることで、以下のような場合に例外を投げます</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token variable">$users</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token property">posts</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>StrictLoadingViolationException: Trying to lazy load [posts] in model [User] is restricted\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>ただしこれは機能します</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">posts</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>AppServiceProvider</code>クラスの<code>boot</code>メソッドでこれを有効にできます。詳しくはドキュメントをチェック</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Eloquent<span class="token punctuation">\\</span>Model</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * アプリケーションの全サービスの初期起動処理\n *\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name static-context">Model</span><span class="token operator">::</span><span class="token function">preventLazyLoading</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">isProduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',10),J={href:"https://github.com/laravel/framework/pull/37363",target:"_blank",rel:"noopener noreferrer"},N=(0,e.Uk)("https://github.com/laravel/framework/pull/37363"),V={href:"https://readouble.com/laravel/8.x/ja/eloquent-relationships.html#preventing-lazy-loading",target:"_blank",rel:"noopener noreferrer"},X=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/eloquent-relationships.html#preventing-lazy-loading"),G=(0,e.uE)('<h2 id="assertdatabaseにモデルサポートを追加" tabindex="-1"><a class="header-anchor" href="#assertdatabaseにモデルサポートを追加" aria-hidden="true">#</a> assertDatabaseにモデルサポートを追加</h2><ul><li>v8.43.0</li><li>src/Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.php</li></ul><p>assertDatabaseXXXX系のメソッドに、クラスを渡せるようになりました</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertDatabaseCount</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertDatabaseCount</span><span class="token punctuation">(</span><span class="token class-name static-context">Users</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertDatabaseCount</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',4),Q={href:"https://github.com/laravel/framework/pull/37459",target:"_blank",rel:"noopener noreferrer"},Y=(0,e.Uk)("https://github.com/laravel/framework/pull/37459"),Z={href:"https://readouble.com/laravel/8.x/ja/database-testing.html#available-assertions",target:"_blank",rel:"noopener noreferrer"},K=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/database-testing.html#available-assertions"),nn=(0,e.uE)('<h2 id="遅延ロード違反を任意で処理できるように" tabindex="-1"><a class="header-anchor" href="#遅延ロード違反を任意で処理できるように" aria-hidden="true">#</a> 遅延ロード違反を任意で処理できるように</h2><ul><li>v8.44.0</li><li>src/Illuminate/Database/Eloquent/Concerns/HasAttributes.php</li><li>src/Illuminate/Database/Eloquent/Model.php</li></ul><p>v8.43.0で追加されたN+1問題検知機能の<code>preventLazyLoading</code>ですが、検知時の処理をカスタマイズできるようになりました</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// AppServiceProvider</span>\n\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token class-name static-context">Model</span><span class="token operator">::</span><span class="token function">handleLazyLoadingViolationUsing</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Log</span><span class="token operator">::</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Lazy loaded relation [<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$key</span><span class="token punctuation">}</span></span>] on model [&quot;</span> <span class="token operator">.</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;].&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// A model</span>\n\n<span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">handleLazyLoadingViolation</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">isProduction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>Log</span><span class="token operator">::</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;Lazy loaded relation [<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$key</span><span class="token punctuation">}</span></span>] on model [&quot;</span> <span class="token operator">.</span> <span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;].&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">LazyLoadingViolationException</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',5),sn={href:"https://github.com/laravel/framework/pull/37480",target:"_blank",rel:"noopener noreferrer"},an=(0,e.Uk)("https://github.com/laravel/framework/pull/37480"),en={href:"https://readouble.com/laravel/8.x/ja/eloquent-relationships.html#preventing-lazy-loading",target:"_blank",rel:"noopener noreferrer"},pn=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/eloquent-relationships.html#preventing-lazy-loading"),tn=(0,e.uE)('<h2 id="php-artisan-storage-linkでのシンボリックリンクの再作成が可能に" tabindex="-1"><a class="header-anchor" href="#php-artisan-storage-linkでのシンボリックリンクの再作成が可能に" aria-hidden="true">#</a> <code>php artisan storage:link</code>でのシンボリックリンクの再作成が可能に</h2><ul><li>v8.44.0</li><li>src/Illuminate/Foundation/Console/StorageLinkCommand.php</li></ul><p><code>--force</code>オプションをつけることでシンボリックリンクをオーバーライドできるようになりました</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>php artisan storage:link --force\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="条件付きバリデーションルールが可能に" tabindex="-1"><a class="header-anchor" href="#条件付きバリデーションルールが可能に" aria-hidden="true">#</a> 条件付きバリデーションルールが可能に</h2><ul><li>v8.45.0</li><li>src/Illuminate/Support/Traits/Conditional.php</li></ul><p>createやupdateに同じルールを使用することもできます</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">PageRequest</span> <span class="token keyword">extends</span> <span class="token class-name">FormRequest</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">rules</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>\n      <span class="token string single-quoted-string">&#39;slug&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n        <span class="token class-name static-context">Rule</span><span class="token operator">::</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token class-name static-context">Page</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;slug&#39;</span><span class="token punctuation">)</span>\n          <span class="token operator">-&gt;</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">isMethod</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;put&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$rule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token variable">$rule</span><span class="token operator">-&gt;</span><span class="token function">ignoreModel</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;page&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="bladeエコーステートメントにクラスハンドリングを追加" tabindex="-1"><a class="header-anchor" href="#bladeエコーステートメントにクラスハンドリングを追加" aria-hidden="true">#</a> Bladeエコーステートメントにクラスハンドリングを追加</h2><ul><li>v8.45.0</li><li>src/Illuminate/View/Compilers/BladeCompiler.php</li><li>src/Illuminate/View/Compilers/Concerns/CompilesEchos.php</li></ul><p><code>AppServiceProvider</code>に登録すると対象のクラス出力時のフォーマットを指定できるようになります</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// AppServiceProvider</span>\n<span class="token class-name static-context">Blade</span><span class="token operator">::</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name static-context">Money</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token function">formatTo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;en_GB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name static-context">Blade</span><span class="token operator">::</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$object</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;d/m/Y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token operator">&lt;</span>dl<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>dt<span class="token operator">&gt;</span>Total<span class="token operator">&lt;</span><span class="token operator">/</span>dt<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>dd<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$product</span><span class="token operator">-&gt;</span><span class="token property">total</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> This is a money <span class="token keyword type-declaration">object</span><span class="token punctuation">,</span> but will be outputted <span class="token keyword">as</span> an en_GB formatted <span class="token keyword type-declaration">string</span> <span class="token operator">--</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>dt<span class="token operator">&gt;</span>Created at<span class="token operator">&lt;</span><span class="token operator">/</span>dt<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>dd<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token variable">$product</span><span class="token operator">-&gt;</span><span class="token property">created_at</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>dd<span class="token operator">&gt;</span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> This is a Carbon <span class="token keyword type-declaration">object</span><span class="token punctuation">,</span> but will be outputted <span class="token keyword">as</span> English date format <span class="token operator">--</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>dl<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="php-artisan-dbでの接続先にreadまたはwriteの指定が可能に" tabindex="-1"><a class="header-anchor" href="#php-artisan-dbでの接続先にreadまたはwriteの指定が可能に" aria-hidden="true">#</a> <code>php artisan db</code>での接続先にreadまたはwriteの指定が可能に</h2><ul><li>v8.45.0</li><li>src/Illuminate/Database/Console/DbCommand.php</li></ul><p><code>php artisan db mysql --read</code></p><p>database.phpにread、wirte設定をしていた場合に有効です</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token string single-quoted-string">&#39;mysql&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n    <span class="token string single-quoted-string">&#39;read&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n        <span class="token string single-quoted-string">&#39;host&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;192.168.1.1&#39;</span><span class="token punctuation">,</span>\n            <span class="token string single-quoted-string">&#39;196.168.1.2&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;write&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n        <span class="token string single-quoted-string">&#39;host&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;196.168.1.3&#39;</span><span class="token punctuation">,</span>\n        <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',18),on={href:"https://github.com/laravel/framework/pull/37548",target:"_blank",rel:"noopener noreferrer"},ln=(0,e.Uk)("https://github.com/laravel/framework/pull/37548"),cn={href:"https://readouble.com/laravel/8.x/ja/database.html#read-and-write-connections",target:"_blank",rel:"noopener noreferrer"},rn=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/database.html#read-and-write-connections"),un=(0,e.uE)('<h2 id="testresponseにダウンロードのテストを追加" tabindex="-1"><a class="header-anchor" href="#testresponseにダウンロードのテストを追加" aria-hidden="true">#</a> TestResponseにダウンロードのテストを追加</h2><ul><li>v8.45.0</li><li>src/Illuminate/Testing/TestResponse.php</li></ul><p><code>-&gt;assertDownload()</code>でダウンロードのテストができるようになりました</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// Action:</span>\n<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name static-context">Response</span><span class="token operator">::</span><span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name static-context">Storage</span><span class="token operator">::</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;download.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;image.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Test:</span>\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">testExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">assertDownload</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;image.png&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">assertOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Result:</span>\n<span class="token comment">// OK (1 test, 2 assertions)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',4),kn={href:"https://github.com/laravel/framework/pull/37532",target:"_blank",rel:"noopener noreferrer"},dn=(0,e.Uk)("https://github.com/laravel/framework/pull/37532"),bn={href:"https://readouble.com/laravel/8.x/ja/http-tests.html#assert-download",target:"_blank",rel:"noopener noreferrer"},mn=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/http-tests.html#assert-download"),gn=(0,e.uE)('<h2 id="notification-stubsのカスタマイズが可能に" tabindex="-1"><a class="header-anchor" href="#notification-stubsのカスタマイズが可能に" aria-hidden="true">#</a> Notification Stubsのカスタマイズが可能に</h2><ul><li>v8.46.0</li></ul><p><code>php artisan make:notification</code>した時に自前のstubを使えるようになりました</p><h2 id="php-artisan-schedule-run出力にタイムスタンプが追加" tabindex="-1"><a class="header-anchor" href="#php-artisan-schedule-run出力にタイムスタンプが追加" aria-hidden="true">#</a> <code>php artisan schedule:run</code>出力にタイムスタンプが追加</h2><ul><li>v8.46.0</li></ul><h2 id="assertablejsonにwherecontains-が追加" tabindex="-1"><a class="header-anchor" href="#assertablejsonにwherecontains-が追加" aria-hidden="true">#</a> AssertableJsonに<code>whereContains()</code>が追加</h2><ul><li>v8.47.0</li><li>src/Illuminate/Testing/Fluent/Concerns/Matching.php</li></ul><p>assertJsonでのテスト時に<code>whereContains()</code>が使えます</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Fluent<span class="token punctuation">\\</span>AssertableJson</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * 基本的な機能テストの例\n *\n * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">void</span></span>\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_fluent_json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getJson</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/users/1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token variable">$response</span>\n        <span class="token operator">-&gt;</span><span class="token function">assertJson</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">AssertableJson</span> <span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n            <span class="token variable">$json</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n                 <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Victoria Faith&#39;</span><span class="token punctuation">)</span>\n                 <span class="token operator">-&gt;</span><span class="token function">missing</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;password&#39;</span><span class="token punctuation">)</span>\n                 <span class="token operator">-&gt;</span><span class="token function">etc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>With array of values:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$assert</span> <span class="token operator">=</span> <span class="token class-name static-context">AssertableJson</span><span class="token operator">::</span><span class="token function">fromArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token string single-quoted-string">&#39;foo&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;bar&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;baz&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Passes:</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Fails:</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Property [foo] does not contain [1].</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Property [foo] does not contain [4].</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Property [foo] does not contain [4].</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;bar&#39;</span><span class="token punctuation">,</span><span class="token string single-quoted-string">&#39;baz&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Property [bar] does not contain [bar].</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>With array of nested values:</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$assert</span> <span class="token operator">=</span> <span class="token class-name static-context">AssertableJson</span><span class="token operator">::</span><span class="token function">fromArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Passes:</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Fails:</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Property [id] does not contain [1].</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Property [id] does not contain [5].</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Property [id] does not contain [5].</span>\n<span class="token variable">$assert</span><span class="token operator">-&gt;</span><span class="token function">whereContains</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Property [id] does not contain [5, 6].</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',13),hn={href:"https://github.com/laravel/framework/pull/37631",target:"_blank",rel:"noopener noreferrer"},vn=(0,e.Uk)("https://github.com/laravel/framework/pull/37631"),fn={href:"https://readouble.com/laravel/8.x/ja/http-tests.html#fluent-json-testing",target:"_blank",rel:"noopener noreferrer"},wn=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/http-tests.html#fluent-json-testing"),yn=(0,e.uE)('<h2 id="strヘルパーにmatchとmatchallが追加" tabindex="-1"><a class="header-anchor" href="#strヘルパーにmatchとmatchallが追加" aria-hidden="true">#</a> Strヘルパーに<code>match</code>と<code>matchAll</code>が追加</h2><ul><li>v8.47.0</li><li>src/Illuminate/Support/Str.php</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token class-name static-context">Str</span><span class="token operator">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;xyz&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/(xyz)/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// works</span>\n<span class="token class-name static-context">Str</span><span class="token operator">::</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/(xyz)/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// does not work</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',3),xn={href:"https://readouble.com/laravel/8.x/ja/helpers.html#collection-method",target:"_blank",rel:"noopener noreferrer"},qn=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/helpers.html#collection-method"),_n=(0,e.uE)('<h2 id="バリデーションルールのpasswordがcurrent-passwordに移行" tabindex="-1"><a class="header-anchor" href="#バリデーションルールのpasswordがcurrent-passwordに移行" aria-hidden="true">#</a> バリデーションルールの<code>password</code>が<code>current_password</code>に移行</h2><ul><li>v8.47.0</li><li>src/Illuminate/Validation/Concerns/ValidatesAttributes.php</li></ul><p>v8系では<code>password</code>も使えますが、v9以降は<code>current_password</code>に移行されます。目的としては次のメジャーバージョンであるv10系で<code>password</code>を<code>Password::default()</code>のエイリアスにしたいようです</p>',3),$n={href:"https://github.com/laravel/framework/pull/37650",target:"_blank",rel:"noopener noreferrer"},Cn=(0,e.Uk)("https://github.com/laravel/framework/pull/37650"),En={href:"https://readouble.com/laravel/8.x/ja/validation.html#rule-current-password",target:"_blank",rel:"noopener noreferrer"},jn=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/validation.html#rule-current-password"),Un=(0,e.uE)('<h2 id="paginatorでtap-が使えるように" tabindex="-1"><a class="header-anchor" href="#paginatorでtap-が使えるように" aria-hidden="true">#</a> Paginatorで<code>tap()</code>が使えるように</h2><ul><li>v8.47.0</li><li>src/Illuminate/Pagination/AbstractCursorPaginator.php</li><li>src/Illuminate/Pagination/AbstractPaginator.php</li></ul><p>Before</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$posts</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Post</span><span class="token operator">::</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Laravel&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token variable">$posts</span><span class="token operator">-&gt;</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;author&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token variable">$posts</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>After</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">return</span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Models<span class="token punctuation">\\</span>Post</span><span class="token operator">::</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Laravel&#39;</span><span class="token punctuation">)</span>\n    <span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token operator">-&gt;</span><span class="token function">tap</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$posts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token variable">$posts</span><span class="token operator">-&gt;</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;author&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="php-artisan-queue-prune-failedが追加" tabindex="-1"><a class="header-anchor" href="#php-artisan-queue-prune-failedが追加" aria-hidden="true">#</a> <code>php artisan queue:prune-failed</code>が追加</h2><ul><li>v8.48.0</li><li>src/Illuminate/Queue/Console/PruneFailedJobsCommand.php</li></ul><p>失敗したジョブ（failed_jobsテーブル）をすべて削除できます</p><p><code>php artisan queue:prune-failed</code></p><p>48時間以上前に挿入された失敗したジョブ（failed_jobsテーブル）をすべて削除できます</p><p><code>php artisan queue:prune-failed --hours=48</code></p><p>queue:flushコマンドからも失敗したジョブ（failed_jobsテーブル）をすべて削除できます</p><p><code>php artisan queue:flush</code></p><p><code>queue:prune-failed</code>と<code>queue:flush</code>の違いは最新のレコードを保持するかどうかです</p><h2 id="オンデマンドディスクの構成が可能に" tabindex="-1"><a class="header-anchor" href="#オンデマンドディスクの構成が可能に" aria-hidden="true">#</a> オンデマンドディスクの構成が可能に</h2><ul><li>v8.48.0</li><li>src/Illuminate/Filesystem/FilesystemManager.php</li></ul><p>config/filesystems.phpを使わないストレージ構成を使用できるようになりました</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token class-name static-context">Storage</span><span class="token operator">::</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token string single-quoted-string">&#39;driver&#39;</span>     <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;local&#39;</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;root&#39;</span>       <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;my-custom-path&#39;</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;url&#39;</span>        <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;my-custom-url&#39;</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;visibility&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;public&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',19),Pn={href:"https://github.com/laravel/framework/pull/37720",target:"_blank",rel:"noopener noreferrer"},In=(0,e.Uk)("https://github.com/laravel/framework/pull/37720"),Wn={href:"https://readouble.com/laravel/8.x/ja/filesystem.html#on-demand-disks",target:"_blank",rel:"noopener noreferrer"},Sn=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/filesystem.html#on-demand-disks"),Dn=(0,e.uE)('<h2 id="collectionにsliding-メソッドが追加" tabindex="-1"><a class="header-anchor" href="#collectionにsliding-メソッドが追加" aria-hidden="true">#</a> Collectionに<code>sliding()</code>メソッドが追加</h2><ul><li>v8.48.0</li><li>src/Illuminate/Collections/Collection.php</li></ul><p>リンクリストを作る時なんかに使えるらしいです。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token class-name static-context">Collection</span><span class="token operator">::</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sliding</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[1, 2], [2, 3], [3, 4], [4, 5]]</span>\n<span class="token class-name static-context">Collection</span><span class="token operator">::</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sliding</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[1, 2, 3], [2, 3, 4], [3, 4, 5]]</span>\n\n<span class="token class-name static-context">Collection</span><span class="token operator">::</span><span class="token function">times</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">sliding</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token argument-name">step</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[1, 2, 3], [3, 4, 5]]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',4),Mn={href:"https://github.com/laravel/framework/pull/37751",target:"_blank",rel:"noopener noreferrer"},An=(0,e.Uk)("https://github.com/laravel/framework/pull/37751"),Fn=(0,e.uE)('<h2 id="httpクライアントのrequestでマクロが使用可能" tabindex="-1"><a class="header-anchor" href="#httpクライアントのrequestでマクロが使用可能" aria-hidden="true">#</a> HttpクライアントのRequestでマクロが使用可能</h2><ul><li>v8.48.0</li><li>src/Illuminate/Http/Client/Request.php</li></ul><p>Httpクライアント使用時のテストで便利なようです</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token class-name static-context">Request</span><span class="token operator">::</span><span class="token function">macro</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;xml&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name static-context">CustomSuperDuperXmlParser</span><span class="token operator">::</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name static-context">Http</span><span class="token operator">::</span><span class="token function">fake</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token string single-quoted-string">&#39;example.com/*&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">xml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">someProperty</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;some value&#39;</span><span class="token punctuation">)</span>\n\n        <span class="token keyword">return</span> <span class="token class-name static-context">Http</span><span class="token operator">::</span><span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',4),Rn={href:"https://github.com/laravel/framework/pull/37744",target:"_blank",rel:"noopener noreferrer"},Ln=(0,e.Uk)("https://github.com/laravel/framework/pull/37744"),Bn=(0,e._)("h2",{id:"filefactory-image-でgif-webp-wbmp-bmpをサポート",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#filefactory-image-でgif-webp-wbmp-bmpをサポート","aria-hidden":"true"},"#"),(0,e.Uk)(),(0,e._)("code",null,"FileFactory::image()"),(0,e.Uk)("でGIF, WEBP, WBMP, BMPをサポート")],-1),Tn=(0,e._)("ul",null,[(0,e._)("li",null,"v8.48.0"),(0,e._)("li",null,"src/Illuminate/Http/Testing/FileFactory.php")],-1),zn={href:"https://github.com/laravel/framework/pull/37743",target:"_blank",rel:"noopener noreferrer"},Hn=(0,e.Uk)("https://github.com/laravel/framework/pull/37743"),On=(0,e.uE)('<h2 id="httpレスポンスからstatustext-を取得" tabindex="-1"><a class="header-anchor" href="#httpレスポンスからstatustext-を取得" aria-hidden="true">#</a> Httpレスポンスから<code>statusText()</code>を取得</h2><ul><li>v8.48.2</li><li>src/Illuminate/Http/ResponseTrait.php</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Not Found&#39;</span><span class="token punctuation">,</span> <span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">statusText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',3),Jn={href:"https://github.com/laravel/framework/pull/37795",target:"_blank",rel:"noopener noreferrer"},Nn=(0,e.Uk)("https://github.com/laravel/framework/pull/37795"),Vn=(0,e.uE)('<h2 id="model-factory-sequence-クロージャーから-countと-indexの参照が可能に" tabindex="-1"><a class="header-anchor" href="#model-factory-sequence-クロージャーから-countと-indexの参照が可能に" aria-hidden="true">#</a> <code>Model::factory()-&gt;sequence()</code>クロージャーから<code>$count</code>と<code>$index</code>の参照が可能に</h2><ul><li>v8.48.2</li><li>src/Illuminate/Database/Eloquent/Factories/Sequence.php</li></ul><p>ドキュメントより</p><blockquote><p>シーケンスクロージャ内では，クロージャへ注入されるシーケンスインスタンスの$indexまたは$countプロパティにアクセスできます。$indexプロパティには、これまでに行われたシーケンスの反復回数が格納され、$countプロパティには、シーケンスが起動された合計回数が格納されます。</p></blockquote><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n                <span class="token operator">-&gt;</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>\n                <span class="token operator">-&gt;</span><span class="token function">sequence</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token variable">$sequence</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Name &#39;</span><span class="token operator">.</span><span class="token variable">$sequence</span><span class="token operator">-&gt;</span><span class="token property">index</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n                <span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',5),Xn={href:"https://readouble.com/laravel/8.x/ja/database-testing.html#sequences",target:"_blank",rel:"noopener noreferrer"},Gn=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/database-testing.html#sequences"),Qn=(0,e.uE)('<h2 id="後続のログにコンテキストを追加" tabindex="-1"><a class="header-anchor" href="#後続のログにコンテキストを追加" aria-hidden="true">#</a> 後続のログにコンテキストを追加</h2><ul><li>v8.49.0</li><li>src/Illuminate/Log/Logger.php</li></ul><p>ドキュメントより</p><blockquote><p>後続のすべてのログエントリに含めるコンテキスト情報を指定したい場合もあるでしょう。例えば、アプリケーションに入ってくる各リクエストに関連付けたリクエストIDをログに記録したい場合があります。実現するには、LogファサードのwithContextメソッドを呼び出してください。</p></blockquote><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Middleware</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Log</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Str</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">AssignRequestId</span>\n<span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * 受信リクエストの処理\n     *\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span>  <span class="token parameter">$request</span>\n     * <span class="token keyword">@param</span>  <span class="token class-name"><span class="token punctuation">\\</span>Closure</span>  <span class="token parameter">$next</span>\n     * <span class="token keyword">@return</span> <span class="token class-name"><span class="token keyword">mixed</span></span>\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Closure</span> <span class="token variable">$next</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$requestId</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token class-name static-context">Str</span><span class="token operator">::</span><span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">withContext</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n            <span class="token string single-quoted-string">&#39;request-id&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$requestId</span>\n        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Request-Id&#39;</span><span class="token punctuation">,</span> <span class="token variable">$requestId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>',5),Yn={href:"https://github.com/laravel/framework/pull/37847/files",target:"_blank",rel:"noopener noreferrer"},Zn=(0,e.Uk)("https://github.com/laravel/framework/pull/37847/files"),Kn={href:"https://readouble.com/laravel/8.x/ja/logging.html#contextual-information",target:"_blank",rel:"noopener noreferrer"},ns=(0,e.Uk)("https://readouble.com/laravel/8.x/ja/logging.html#contextual-information"),ss={},as=(0,a(3744).Z)(ss,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[(0,e._)("a",t,[o,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",l,[c,(0,e.Wm)(a)])]),r,(0,e._)("p",null,[(0,e._)("a",i,[u,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",k,[d,(0,e.Wm)(a)])]),b,(0,e._)("p",null,[(0,e._)("a",m,[g,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",h,[v,(0,e.Wm)(a)])]),f,(0,e._)("p",null,[(0,e._)("a",w,[y,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",x,[q,(0,e.Wm)(a)])]),_,(0,e._)("p",null,[(0,e._)("a",$,[C,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",E,[j,(0,e.Wm)(a)])]),U,(0,e._)("p",null,[(0,e._)("a",P,[I,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",W,[S,(0,e.Wm)(a)])]),D,M,A,(0,e._)("p",null,[(0,e._)("a",F,[R,(0,e.Wm)(a)])]),L,(0,e._)("p",null,[(0,e._)("a",B,[T,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",z,[H,(0,e.Wm)(a)])]),O,(0,e._)("p",null,[(0,e._)("a",J,[N,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",V,[X,(0,e.Wm)(a)])]),G,(0,e._)("p",null,[(0,e._)("a",Q,[Y,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",Z,[K,(0,e.Wm)(a)])]),nn,(0,e._)("p",null,[(0,e._)("a",sn,[an,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",en,[pn,(0,e.Wm)(a)])]),tn,(0,e._)("p",null,[(0,e._)("a",on,[ln,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",cn,[rn,(0,e.Wm)(a)])]),un,(0,e._)("p",null,[(0,e._)("a",kn,[dn,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",bn,[mn,(0,e.Wm)(a)])]),gn,(0,e._)("p",null,[(0,e._)("a",hn,[vn,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",fn,[wn,(0,e.Wm)(a)])]),yn,(0,e._)("p",null,[(0,e._)("a",xn,[qn,(0,e.Wm)(a)])]),_n,(0,e._)("p",null,[(0,e._)("a",$n,[Cn,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",En,[jn,(0,e.Wm)(a)])]),Un,(0,e._)("p",null,[(0,e._)("a",Pn,[In,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",Wn,[Sn,(0,e.Wm)(a)])]),Dn,(0,e._)("p",null,[(0,e._)("a",Mn,[An,(0,e.Wm)(a)])]),Fn,(0,e._)("p",null,[(0,e._)("a",Rn,[Ln,(0,e.Wm)(a)])]),Bn,Tn,(0,e._)("p",null,[(0,e._)("a",zn,[Hn,(0,e.Wm)(a)])]),On,(0,e._)("p",null,[(0,e._)("a",Jn,[Nn,(0,e.Wm)(a)])]),Vn,(0,e._)("p",null,[(0,e._)("a",Xn,[Gn,(0,e.Wm)(a)])]),Qn,(0,e._)("p",null,[(0,e._)("a",Yn,[Zn,(0,e.Wm)(a)])]),(0,e._)("p",null,[(0,e._)("a",Kn,[ns,(0,e.Wm)(a)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);