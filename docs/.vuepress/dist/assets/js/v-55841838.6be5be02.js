"use strict";(self.webpackChunklaravel_update_info=self.webpackChunklaravel_update_info||[]).push([[314],{3407:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-55841838",path:"/laravel8/v8.30-v8.39/",title:"v8.30-v8.39",lang:"ja-JP",frontmatter:{},excerpt:"",headers:[{level:2,title:"バリデーションで最初にエラーが見つかったら即終了するstopOnFirstFailure()メソッドが追加",slug:"バリデーションで最初にエラーが見つかったら即終了するstoponfirstfailure-メソッドが追加",children:[]},{level:2,title:"FluentなjsonのAssertが追加",slug:"fluentなjsonのassertが追加",children:[]},{level:2,title:"Str::remove, Stringable::remove()が追加",slug:"str-remove-stringable-remove-が追加",children:[]},{level:2,title:"Eloquentにlazy()とlazyById()メソッドが追加",slug:"eloquentにlazy-とlazybyid-メソッドが追加",children:[]},{level:2,title:"MySQLのdatetime型へのuseCurrentOnUpdateをサポート",slug:"mysqlのdatetime型へのusecurrentonupdateをサポート",children:[]},{level:2,title:"無名クラスでマイグレーションが可能に",slug:"無名クラスでマイグレーションが可能に",children:[]},{level:2,title:"Httpクライアントで同時非同期リクエスト処理ができるように",slug:"httpクライアントで同時非同期リクエスト処理ができるように",children:[]},{level:2,title:"wordCount()ヘルパーが追加",slug:"wordcount-ヘルパーが追加",children:[]},{level:2,title:"Stringable::whenNotEmpty()が追加",slug:"stringable-whennotempty-が追加",children:[]},{level:2,title:"バリデーションにPasswordルールが追加",slug:"バリデーションにpasswordルールが追加",children:[]}],filePathRelative:"laravel8/v8.30-v8.39/README.md",git:{updatedTime:1639753532e3,contributors:[{name:"okdyy75",email:"okdyy75@gmail.com",commits:1}]}}},4025:(n,s,a)=>{a.r(s),a.d(s,{default:()=>Y});var t=a(6252);const p=(0,t.uE)('<h1 id="v8-30-v8-39" tabindex="-1"><a class="header-anchor" href="#v8-30-v8-39" aria-hidden="true">#</a> v8.30-v8.39</h1><h2 id="バリデーションで最初にエラーが見つかったら即終了するstoponfirstfailure-メソッドが追加" tabindex="-1"><a class="header-anchor" href="#バリデーションで最初にエラーが見つかったら即終了するstoponfirstfailure-メソッドが追加" aria-hidden="true">#</a> バリデーションで最初にエラーが見つかったら即終了する<code>stopOnFirstFailure()</code>メソッドが追加</h2><ul><li>v8.30.0</li><li>src/Illuminate/Foundation/Http/FormRequest.php</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$validator</span><span class="token operator">-&gt;</span><span class="token function">stopOnFirstFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">fails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',4),e={href:"https://github.com/laravel/framework/commit/39e1f84a48fec024859d4e80948aca9bd7878658",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("https://github.com/laravel/framework/commit/39e1f84a48fec024859d4e80948aca9bd7878658"),l={href:"https://readouble.com/laravel/8.x/ja/validation.html#manually-creating-validators",target:"_blank",rel:"noopener noreferrer"},c=(0,t.Uk)("https://readouble.com/laravel/8.x/ja/validation.html#manually-creating-validators"),r=(0,t.uE)('<h2 id="fluentなjsonのassertが追加" tabindex="-1"><a class="header-anchor" href="#fluentなjsonのassertが追加" aria-hidden="true">#</a> FluentなjsonのAssertが追加</h2><ul><li>v8.32.0</li><li>src/Illuminate/Testing/Fluent/Assert.php</li></ul><p>Fluent（メソッドチェーンライク）にjsonのassertができるようになりました。</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Testing<span class="token punctuation">\\</span>Fluent<span class="token punctuation">\\</span>Assert</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">PodcastsControllerTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test_can_view_podcast</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/podcasts/41&#39;</span><span class="token punctuation">)</span>\n\t\t\t<span class="token operator">-&gt;</span><span class="token function">assertJson</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$json</span>\n\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;podcast&#39;</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$json</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token variable">$podcast</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;subject&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;The Laravel Podcast&#39;</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;description&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;The Laravel Podcast brings you Laravel &amp; PHP development news.&#39;</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;seasons&#39;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;seasons.4.episodes&#39;</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;host&#39;</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$json</span>\n\t\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>\n\t\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Matt Stauffer&#39;</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;subscribers&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Assert</span> <span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$json</span>\n\t\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>\n\t\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Claudio Dekker&#39;</span><span class="token punctuation">)</span>\n\t\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;platform&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Apple Podcasts&#39;</span><span class="token punctuation">)</span>\n\t\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">etc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">missing</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">)</span>\n\t\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">missing</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;password&#39;</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',4),i={href:"https://github.com/laravel/framework/pull/36454",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("https://github.com/laravel/framework/pull/36454"),k={href:"https://readouble.com/laravel/8.x/ja/http-tests.html#fluent-json-testing",target:"_blank",rel:"noopener noreferrer"},m=(0,t.Uk)("https://readouble.com/laravel/8.x/ja/http-tests.html#fluent-json-testing"),d=(0,t.uE)('<h2 id="str-remove-stringable-remove-が追加" tabindex="-1"><a class="header-anchor" href="#str-remove-stringable-remove-が追加" aria-hidden="true">#</a> <code>Str::remove</code>, <code>Stringable::remove()</code>が追加</h2><ul><li>v8.34.0</li><li>src/Illuminate/Support/Str.php</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token comment">// Fbar</span>\n<span class="token class-name static-context">Str</span><span class="token operator">::</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Foobar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name static-context">Str</span><span class="token operator">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Foobar&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Fbr</span>\n<span class="token class-name static-context">Str</span><span class="token operator">::</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;Foobar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name static-context">Str</span><span class="token operator">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Foobar&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;o&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',3),g={href:"https://github.com/laravel/framework/pull/36639",target:"_blank",rel:"noopener noreferrer"},b=(0,t.Uk)("https://github.com/laravel/framework/pull/36639"),h={href:"https://readouble.com/laravel/8.x/ja/helpers.html#method-str-remove",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Uk)("https://readouble.com/laravel/8.x/ja/helpers.html#method-str-remove"),v=(0,t.uE)('<h2 id="eloquentにlazy-とlazybyid-メソッドが追加" tabindex="-1"><a class="header-anchor" href="#eloquentにlazy-とlazybyid-メソッドが追加" aria-hidden="true">#</a> Eloquentに<code>lazy()</code>と<code>lazyById()</code>メソッドが追加</h2><ul><li>v8.34.0</li><li>src/Illuminate/Database/Concerns/BuildsQueries.php</li></ul><p>LazyCollectionを使うことでメモリ消費を抑えつつ、Collectionのように扱えるようになった！という感じですね</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token variable">$lazyCollection</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',4),w={href:"https://github.com/laravel/framework/pull/36699",target:"_blank",rel:"noopener noreferrer"},q=(0,t.Uk)("https://github.com/laravel/framework/pull/36699"),y={href:"https://readouble.com/laravel/8.x/ja/eloquent.html#streaming-results-lazily",target:"_blank",rel:"noopener noreferrer"},_=(0,t.Uk)("https://readouble.com/laravel/8.x/ja/eloquent.html#streaming-results-lazily"),x=(0,t._)("h2",{id:"mysqlのdatetime型へのusecurrentonupdateをサポート",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#mysqlのdatetime型へのusecurrentonupdateをサポート","aria-hidden":"true"},"#"),(0,t.Uk)(" MySQLのdatetime型へのuseCurrentOnUpdateをサポート")],-1),j=(0,t._)("ul",null,[(0,t._)("li",null,"v8.36.0"),(0,t._)("li",null,"src/Illuminate/Database/Schema/Grammars/MySqlGrammar.php")],-1),S={href:"https://github.com/laravel/framework/pull/36817",target:"_blank",rel:"noopener noreferrer"},$=(0,t.Uk)("https://github.com/laravel/framework/pull/36817"),U={href:"https://readouble.com/laravel/8.x/ja/migrations.html#column-modifiers",target:"_blank",rel:"noopener noreferrer"},P=(0,t.Uk)("https://readouble.com/laravel/8.x/ja/migrations.html#column-modifiers"),C=(0,t.uE)('<h2 id="無名クラスでマイグレーションが可能に" tabindex="-1"><a class="header-anchor" href="#無名クラスでマイグレーションが可能に" aria-hidden="true">#</a> 無名クラスでマイグレーションが可能に</h2><ul><li>v8.37.0</li><li>src/Illuminate/Database/Migrations/Migrator.php</li></ul><p>クラス名の衝突がなくなります</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Database<span class="token punctuation">\\</span>Migrations<span class="token punctuation">\\</span>Migration</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">extends</span> <span class="token class-name">Migration</span>\n<span class="token punctuation">{</span>\n\t<span class="token comment">//</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</span></code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',4),F={href:"https://github.com/laravel/framework/pull/36906",target:"_blank",rel:"noopener noreferrer"},I=(0,t.Uk)("https://github.com/laravel/framework/pull/36906"),W={href:"https://readouble.com/laravel/8.x/ja/migrations.html#anonymous-migrations",target:"_blank",rel:"noopener noreferrer"},E=(0,t.Uk)("https://readouble.com/laravel/8.x/ja/migrations.html#anonymous-migrations"),z=(0,t.uE)('<h2 id="httpクライアントで同時非同期リクエスト処理ができるように" tabindex="-1"><a class="header-anchor" href="#httpクライアントで同時非同期リクエスト処理ができるように" aria-hidden="true">#</a> Httpクライアントで同時非同期リクエスト処理ができるように</h2><ul><li>v8.37.0</li><li>src/Illuminate/Http/Client/PendingRequest.php</li><li>src/Illuminate/Http/Client/Pool.php</li></ul><p>効率良くHttpリクエストを処理できるようになりました</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Client<span class="token punctuation">\\</span>Pool</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Http</span><span class="token punctuation">;</span>\n\n<span class="token variable">$responses</span> <span class="token operator">=</span> <span class="token class-name static-context">Http</span><span class="token operator">::</span><span class="token function">pool</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Pool</span> <span class="token variable">$pool</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n\t<span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;http://localhost/first&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;http://localhost/second&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t<span class="token variable">$pool</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;http://localhost/third&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> <span class="token variable">$responses</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n\t\t<span class="token variable">$responses</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>\n\t\t<span class="token variable">$responses</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-&gt;</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',4),M={href:"https://github.com/laravel/framework/pull/36948",target:"_blank",rel:"noopener noreferrer"},A=(0,t.Uk)("https://github.com/laravel/framework/pull/36948"),H={href:"https://readouble.com/laravel/8.x/ja/http-client.html#concurrent-requests",target:"_blank",rel:"noopener noreferrer"},O=(0,t.Uk)("https://readouble.com/laravel/8.x/ja/http-client.html#concurrent-requests"),T=(0,t.uE)('<h2 id="wordcount-ヘルパーが追加" tabindex="-1"><a class="header-anchor" href="#wordcount-ヘルパーが追加" aria-hidden="true">#</a> <code>wordCount()</code>ヘルパーが追加</h2><ul><li>v8.38.0</li><li>src/Illuminate/Support/Str.php</li><li>src/Illuminate/Support/Stringable.php</li></ul><p>phpの<code>str_word_count()</code>のラッパーです。<code>str_word_count()</code>はマルチバイト文字列を使うロケールはサポート外らしく日本語では使えません</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getWordCountAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">return</span> <span class="token class-name static-context">Str</span><span class="token operator">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">body</span><span class="token punctuation">)</span>\n\t\t<span class="token operator">-&gt;</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;y&#39;</span><span class="token punctuation">)</span> <span class="token comment">// do something</span>\n\t\t<span class="token operator">-&gt;</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;b&#39;</span><span class="token punctuation">)</span> <span class="token comment">// do something else</span>\n\t\t<span class="token operator">-&gt;</span><span class="token function">wordCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',4),D={href:"https://github.com/laravel/framework/pull/36990/files",target:"_blank",rel:"noopener noreferrer"},L=(0,t.Uk)("https://github.com/laravel/framework/pull/36990/files"),R=(0,t.uE)('<h2 id="stringable-whennotempty-が追加" tabindex="-1"><a class="header-anchor" href="#stringable-whennotempty-が追加" aria-hidden="true">#</a> <code>Stringable::whenNotEmpty()</code>が追加</h2><ul><li>v8.39.0</li><li>src/Illuminate/Support/Stringable.php</li></ul><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code><span class="token class-name static-context">Str</span><span class="token operator">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token function">env</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;SCOUT_PREFIX&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token operator">-&gt;</span><span class="token function">whenNotEmpty</span><span class="token punctuation">(</span><span class="token keyword">fn</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Stringable</span> <span class="token variable">$prefix</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token variable">$prefix</span><span class="token operator">-&gt;</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',3),B={href:"https://github.com/laravel/framework/pull/37080",target:"_blank",rel:"noopener noreferrer"},N=(0,t.Uk)("https://github.com/laravel/framework/pull/37080"),Q=(0,t.uE)('<h2 id="バリデーションにpasswordルールが追加" tabindex="-1"><a class="header-anchor" href="#バリデーションにpasswordルールが追加" aria-hidden="true">#</a> バリデーションにPasswordルールが追加</h2><ul><li>v8.39.0</li><li>src/Illuminate/Validation/Rules/Password.php</li></ul><p>このように使えて</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>\t\t<span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n\n\t\t\t<span class="token comment">// Makes the password require at least one uppercase and one lowercase letter.</span>\n\t\t\t<span class="token string single-quoted-string">&#39;password&#39;</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;confirmed&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Password</span><span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">mixedCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n\t\t\t <span class="token comment">// Makes the password require at least one letter.</span>\n\t\t\t<span class="token string single-quoted-string">&#39;password&#39;</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;confirmed&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Password</span><span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">letters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n\t\t\t<span class="token comment">// Makes the password require at least one number.</span>\n\t\t\t<span class="token string single-quoted-string">&#39;password&#39;</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;confirmed&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Password</span><span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n\t\t\t<span class="token comment">// Makes the password require at least one symbol.</span>\n\t\t\t<span class="token string single-quoted-string">&#39;password&#39;</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;confirmed&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Password</span><span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">symbols</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\n\t\t\t<span class="token comment">// Ensures the password has not been compromised in data leaks.</span>\n\t\t\t<span class="token string single-quoted-string">&#39;password&#39;</span> <span class="token operator">=&gt;</span>  <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;confirmed&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Password</span><span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">uncompromised</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>全部を組み合わせることも可能</p><div class="language-php ext-php line-numbers-mode"><pre class="language-php"><code>\t<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">store</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n\t\t\t<span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;required|string|max:255&#39;</span><span class="token punctuation">,</span>\n\t\t\t<span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;required|string|email|max:255|unique:users&#39;</span><span class="token punctuation">,</span>\n\t\t\t<span class="token string single-quoted-string">&#39;password&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;required&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;confirmed&#39;</span><span class="token punctuation">,</span> <span class="token class-name static-context">Password</span><span class="token operator">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">mixedCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">letters</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">symbols</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token operator">-&gt;</span><span class="token function">uncompromised</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\t\t\t<span class="token punctuation">]</span><span class="token punctuation">,</span>\n\t\t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',6),G={href:"https://github.com/laravel/framework/pull/36960",target:"_blank",rel:"noopener noreferrer"},J=(0,t.Uk)("https://github.com/laravel/framework/pull/36960"),Z={href:"https://readouble.com/laravel/8.x/ja/validation.html#validating-passwords",target:"_blank",rel:"noopener noreferrer"},V=(0,t.Uk)("https://readouble.com/laravel/8.x/ja/validation.html#validating-passwords"),X={},Y=(0,a(3744).Z)(X,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[(0,t._)("a",e,[o,(0,t.Wm)(a)])]),(0,t._)("p",null,[(0,t._)("a",l,[c,(0,t.Wm)(a)])]),r,(0,t._)("p",null,[(0,t._)("a",i,[u,(0,t.Wm)(a)])]),(0,t._)("p",null,[(0,t._)("a",k,[m,(0,t.Wm)(a)])]),d,(0,t._)("p",null,[(0,t._)("a",g,[b,(0,t.Wm)(a)])]),(0,t._)("p",null,[(0,t._)("a",h,[f,(0,t.Wm)(a)])]),v,(0,t._)("p",null,[(0,t._)("a",w,[q,(0,t.Wm)(a)])]),(0,t._)("p",null,[(0,t._)("a",y,[_,(0,t.Wm)(a)])]),x,j,(0,t._)("p",null,[(0,t._)("a",S,[$,(0,t.Wm)(a)])]),(0,t._)("p",null,[(0,t._)("a",U,[P,(0,t.Wm)(a)])]),C,(0,t._)("p",null,[(0,t._)("a",F,[I,(0,t.Wm)(a)])]),(0,t._)("p",null,[(0,t._)("a",W,[E,(0,t.Wm)(a)])]),z,(0,t._)("p",null,[(0,t._)("a",M,[A,(0,t.Wm)(a)])]),(0,t._)("p",null,[(0,t._)("a",H,[O,(0,t.Wm)(a)])]),T,(0,t._)("p",null,[(0,t._)("a",D,[L,(0,t.Wm)(a)])]),R,(0,t._)("p",null,[(0,t._)("a",B,[N,(0,t.Wm)(a)])]),Q,(0,t._)("p",null,[(0,t._)("a",G,[J,(0,t.Wm)(a)])]),(0,t._)("p",null,[(0,t._)("a",Z,[V,(0,t.Wm)(a)])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}}}]);